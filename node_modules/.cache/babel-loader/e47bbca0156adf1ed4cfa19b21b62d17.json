{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VProgressCircular\\VProgressCircular.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VProgressCircular\\VProgressCircular.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VProgressCircular/VProgressCircular.sass\"; // Mixins\n\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport { convertToUnit } from '../../util/helpers';\n/* @vue/component */\n\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    size: {\n      type: [Number, String],\n      default: 32\n    },\n    width: {\n      type: [Number, String],\n      default: 4\n    },\n    value: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: () => ({\n    radius: 20\n  }),\n  computed: {\n    calculatedSize() {\n      return Number(this.size) + (this.button ? 8 : 0);\n    },\n\n    circumference() {\n      return 2 * Math.PI * this.radius;\n    },\n\n    classes() {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button\n      };\n    },\n\n    normalizedValue() {\n      if (this.value < 0) {\n        return 0;\n      }\n\n      if (this.value > 100) {\n        return 100;\n      }\n\n      return parseFloat(this.value);\n    },\n\n    strokeDashArray() {\n      return Math.round(this.circumference * 1000) / 1000;\n    },\n\n    strokeDashOffset() {\n      return (100 - this.normalizedValue) / 100 * this.circumference + 'px';\n    },\n\n    strokeWidth() {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2;\n    },\n\n    styles() {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize)\n      };\n    },\n\n    svgStyles() {\n      return {\n        transform: `rotate(${Number(this.rotate)}deg)`\n      };\n    },\n\n    viewBoxSize() {\n      return this.radius / (1 - Number(this.width) / +this.size);\n    }\n\n  },\n  methods: {\n    genCircle(name, offset) {\n      return this.$createElement('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset\n        }\n      });\n    },\n\n    genSvg() {\n      const children = [this.indeterminate || this.genCircle('underlay', 0), this.genCircle('overlay', this.strokeDashOffset)];\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`\n        }\n      }, children);\n    },\n\n    genInfo() {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info'\n      }, this.$slots.default);\n    }\n\n  },\n\n  render(h) {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners\n    }), [this.genSvg(), this.genInfo()]);\n  }\n\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VProgressCircular\\VProgressCircular.js"],"names":["Colorable","convertToUnit","extend","name","props","button","Boolean","indeterminate","rotate","type","Number","String","default","size","width","value","data","radius","computed","calculatedSize","circumference","Math","PI","classes","normalizedValue","parseFloat","strokeDashArray","round","strokeDashOffset","strokeWidth","viewBoxSize","styles","height","svgStyles","transform","methods","genCircle","offset","$createElement","class","attrs","fill","cx","cy","r","genSvg","children","style","xmlns","viewBox","genInfo","staticClass","$slots","render","h","setTextColor","color","role","undefined","on","$listeners"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VProgressCircular/VProgressCircular.sass\"; // Mixins\n\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport { convertToUnit } from '../../util/helpers';\n/* @vue/component */\n\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    size: {\n      type: [Number, String],\n      default: 32\n    },\n    width: {\n      type: [Number, String],\n      default: 4\n    },\n    value: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: () => ({\n    radius: 20\n  }),\n  computed: {\n    calculatedSize() {\n      return Number(this.size) + (this.button ? 8 : 0);\n    },\n\n    circumference() {\n      return 2 * Math.PI * this.radius;\n    },\n\n    classes() {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button\n      };\n    },\n\n    normalizedValue() {\n      if (this.value < 0) {\n        return 0;\n      }\n\n      if (this.value > 100) {\n        return 100;\n      }\n\n      return parseFloat(this.value);\n    },\n\n    strokeDashArray() {\n      return Math.round(this.circumference * 1000) / 1000;\n    },\n\n    strokeDashOffset() {\n      return (100 - this.normalizedValue) / 100 * this.circumference + 'px';\n    },\n\n    strokeWidth() {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2;\n    },\n\n    styles() {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize)\n      };\n    },\n\n    svgStyles() {\n      return {\n        transform: `rotate(${Number(this.rotate)}deg)`\n      };\n    },\n\n    viewBoxSize() {\n      return this.radius / (1 - Number(this.width) / +this.size);\n    }\n\n  },\n  methods: {\n    genCircle(name, offset) {\n      return this.$createElement('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset\n        }\n      });\n    },\n\n    genSvg() {\n      const children = [this.indeterminate || this.genCircle('underlay', 0), this.genCircle('overlay', this.strokeDashOffset)];\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`\n        }\n      }, children);\n    },\n\n    genInfo() {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info'\n      }, this.$slots.default);\n    }\n\n  },\n\n  render(h) {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners\n    }), [this.genSvg(), this.genInfo()]);\n  }\n\n});\n//# sourceMappingURL=VProgressCircular.js.map"]}]}