{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VCalendar\\util\\events.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VCalendar\\util\\events.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { parseTimestamp, getDayIdentifier, getTimestampIdentifier } from './timestamp';\nexport function parseEvent(input, index, startProperty, endProperty) {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm');\n  }\n\n  const start = parseTimestamp(input[startProperty]);\n  const end = input[endProperty] ? parseTimestamp(input[endProperty]) : start;\n  const startIdentifier = getDayIdentifier(start);\n  const startTimestampIdentifier = getTimestampIdentifier(start);\n  const endIdentifier = getDayIdentifier(end);\n  const endTimestampIdentifier = getTimestampIdentifier(end);\n  const allDay = !start.hasTime;\n  return {\n    input,\n    start,\n    startIdentifier,\n    startTimestampIdentifier,\n    end,\n    endIdentifier,\n    endTimestampIdentifier,\n    allDay,\n    index\n  };\n}\nexport function isEventOn(event, dayIdentifier) {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier;\n}\nexport function isEventOverlapping(event, startIdentifier, endIdentifier) {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;\n}",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VCalendar\\util\\events.js"],"names":["parseTimestamp","getDayIdentifier","getTimestampIdentifier","parseEvent","input","index","startProperty","endProperty","Error","start","end","startIdentifier","startTimestampIdentifier","endIdentifier","endTimestampIdentifier","allDay","hasTime","isEventOn","event","dayIdentifier","isEventOverlapping"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,sBAA3C,QAAyE,aAAzE;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,aAAlC,EAAiDC,WAAjD,EAA8D;AACnE,MAAI,EAAED,aAAa,IAAIF,KAAnB,CAAJ,EAA+B;AAC7B,UAAM,IAAII,KAAJ,CAAU,SAASF,aAAT,GAAyB,0GAAnC,CAAN;AACD;;AAED,QAAMG,KAAK,GAAGT,cAAc,CAACI,KAAK,CAACE,aAAD,CAAN,CAA5B;AACA,QAAMI,GAAG,GAAGN,KAAK,CAACG,WAAD,CAAL,GAAqBP,cAAc,CAACI,KAAK,CAACG,WAAD,CAAN,CAAnC,GAA0DE,KAAtE;AACA,QAAME,eAAe,GAAGV,gBAAgB,CAACQ,KAAD,CAAxC;AACA,QAAMG,wBAAwB,GAAGV,sBAAsB,CAACO,KAAD,CAAvD;AACA,QAAMI,aAAa,GAAGZ,gBAAgB,CAACS,GAAD,CAAtC;AACA,QAAMI,sBAAsB,GAAGZ,sBAAsB,CAACQ,GAAD,CAArD;AACA,QAAMK,MAAM,GAAG,CAACN,KAAK,CAACO,OAAtB;AACA,SAAO;AACLZ,IAAAA,KADK;AAELK,IAAAA,KAFK;AAGLE,IAAAA,eAHK;AAILC,IAAAA,wBAJK;AAKLF,IAAAA,GALK;AAMLG,IAAAA,aANK;AAOLC,IAAAA,sBAPK;AAQLC,IAAAA,MARK;AASLV,IAAAA;AATK,GAAP;AAWD;AACD,OAAO,SAASY,SAAT,CAAmBC,KAAnB,EAA0BC,aAA1B,EAAyC;AAC9C,SAAOA,aAAa,IAAID,KAAK,CAACP,eAAvB,IAA0CQ,aAAa,IAAID,KAAK,CAACL,aAAxE;AACD;AACD,OAAO,SAASO,kBAAT,CAA4BF,KAA5B,EAAmCP,eAAnC,EAAoDE,aAApD,EAAmE;AACxE,SAAOF,eAAe,IAAIO,KAAK,CAACL,aAAzB,IAA0CA,aAAa,IAAIK,KAAK,CAACP,eAAxE;AACD","sourcesContent":["import { parseTimestamp, getDayIdentifier, getTimestampIdentifier } from './timestamp';\nexport function parseEvent(input, index, startProperty, endProperty) {\n  if (!(startProperty in input)) {\n    throw new Error('The ' + startProperty + ' property is required on all events to be a valid timestamp in the format YYYY-MM-DD or YYYY-MM-DD hh:mm');\n  }\n\n  const start = parseTimestamp(input[startProperty]);\n  const end = input[endProperty] ? parseTimestamp(input[endProperty]) : start;\n  const startIdentifier = getDayIdentifier(start);\n  const startTimestampIdentifier = getTimestampIdentifier(start);\n  const endIdentifier = getDayIdentifier(end);\n  const endTimestampIdentifier = getTimestampIdentifier(end);\n  const allDay = !start.hasTime;\n  return {\n    input,\n    start,\n    startIdentifier,\n    startTimestampIdentifier,\n    end,\n    endIdentifier,\n    endTimestampIdentifier,\n    allDay,\n    index\n  };\n}\nexport function isEventOn(event, dayIdentifier) {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier;\n}\nexport function isEventOverlapping(event, startIdentifier, endIdentifier) {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;\n}\n//# sourceMappingURL=events.js.map"]}]}