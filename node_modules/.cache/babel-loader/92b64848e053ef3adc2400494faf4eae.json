{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VFileInput\\VFileInput.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VFileInput\\VFileInput.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VFileInput/VFileInput.sass\"; // Extensions\n\nimport VTextField from '../VTextField'; // Components\n\nimport { VChip } from '../VChip'; // Utilities\n\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nexport default VTextField.extend({\n  name: 'v-file-input',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize'\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter'\n    },\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: v => {\n        return typeof v === 'boolean' || [1000, 1024].includes(v);\n      }\n    },\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22\n    },\n    type: {\n      type: String,\n      default: 'file'\n    },\n    value: {\n      default: () => [],\n      validator: val => {\n        return typeof val === 'object' || Array.isArray(val);\n      }\n    }\n  },\n  computed: {\n    classes() {\n      return { ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true\n      };\n    },\n\n    counterValue() {\n      const fileCount = this.isMultiple && this.lazyValue ? this.lazyValue.length : this.lazyValue instanceof File ? 1 : 0;\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount);\n      const bytes = this.internalArrayValue.reduce((size, file) => size + file.size, 0);\n      return this.$vuetify.lang.t(this.counterSizeString, fileCount, humanReadableFileSize(bytes, this.base === 1024));\n    },\n\n    internalArrayValue() {\n      return Array.isArray(this.internalValue) ? this.internalValue : wrapInArray(this.internalValue);\n    },\n\n    internalValue: {\n      get() {\n        return this.lazyValue;\n      },\n\n      set(val) {\n        this.lazyValue = val;\n        this.$emit('change', this.lazyValue);\n      }\n\n    },\n\n    isDirty() {\n      return this.internalArrayValue.length > 0;\n    },\n\n    isLabelActive() {\n      return this.isDirty;\n    },\n\n    isMultiple() {\n      return this.$attrs.hasOwnProperty('multiple');\n    },\n\n    text() {\n      if (!this.isDirty) return [this.placeholder];\n      return this.internalArrayValue.map(file => {\n        const name = this.truncateText(file.name);\n        return !this.showSize ? name : `${name} (${humanReadableFileSize(file.size, this.base === 1024)})`;\n      });\n    },\n\n    base() {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined;\n    },\n\n    hasChips() {\n      return this.chips || this.smallChips;\n    }\n\n  },\n  watch: {\n    readonly: {\n      handler(v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this);\n      },\n\n      immediate: true\n    },\n\n    value(v) {\n      const value = this.isMultiple ? v : v ? [v] : [];\n\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = '';\n      }\n    }\n\n  },\n  methods: {\n    clearableCallback() {\n      this.internalValue = this.isMultiple ? [] : null;\n      this.$refs.input.value = '';\n    },\n\n    genChips() {\n      if (!this.isDirty) return [];\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: {\n          small: this.smallChips\n        },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue;\n            internalValue.splice(index, 1);\n            this.internalValue = internalValue; // Trigger the watcher\n          }\n        }\n      }, [text]));\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this); // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n\n      delete input.data.domProps.value; // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n\n      delete input.data.on.input;\n      input.data.on.change = this.onInput;\n      return [this.genSelections(), input];\n    },\n\n    genPrependSlot() {\n      if (!this.prependIcon) return null;\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click();\n      });\n      return this.genSlot('prepend', 'outer', [icon]);\n    },\n\n    genSelectionText() {\n      const length = this.text.length;\n      if (length < 2) return this.text;\n      if (this.showSize && !this.counter) return [this.counterValue];\n      return [this.$vuetify.lang.t(this.counterString, length)];\n    },\n\n    genSelections() {\n      const children = [];\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file, index) => {\n          if (!this.$scopedSlots.selection) return;\n          children.push(this.$scopedSlots.selection({\n            text: this.text[index],\n            file,\n            index\n          }));\n        });\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText());\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection\n        },\n        on: {\n          click: () => this.$refs.input.click()\n        }\n      }, children);\n    },\n\n    onInput(e) {\n      const files = [...(e.target.files || [])];\n      this.internalValue = this.isMultiple ? files : files[0]; // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n\n      this.initialValue = this.internalValue;\n    },\n\n    onKeyDown(e) {\n      this.$emit('keydown', e);\n    },\n\n    truncateText(str) {\n      if (str.length < Number(this.truncateLength)) return str;\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2);\n      return `${str.slice(0, charsKeepOneSide)}â€¦${str.slice(str.length - charsKeepOneSide)}`;\n    }\n\n  }\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VFileInput\\VFileInput.js"],"names":["VTextField","VChip","deepEqual","humanReadableFileSize","wrapInArray","consoleError","extend","name","model","prop","event","props","chips","Boolean","clearable","type","default","counterSizeString","String","counterString","placeholder","prependIcon","readonly","showSize","Number","validator","v","includes","smallChips","truncateLength","value","val","Array","isArray","computed","classes","options","call","counterValue","fileCount","isMultiple","lazyValue","length","File","$vuetify","lang","t","bytes","internalArrayValue","reduce","size","file","base","internalValue","get","set","$emit","isDirty","isLabelActive","$attrs","hasOwnProperty","text","map","truncateText","undefined","hasChips","watch","handler","immediate","$refs","input","files","methods","clearableCallback","genChips","index","$createElement","small","on","splice","genInput","data","domProps","change","onInput","genSelections","genPrependSlot","icon","genIcon","click","genSlot","genSelectionText","counter","children","$scopedSlots","selection","forEach","push","staticClass","class","e","target","initialValue","onKeyDown","str","charsKeepOneSide","Math","floor","slice"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VFileInput/VFileInput.sass\"; // Extensions\n\nimport VTextField from '../VTextField'; // Components\n\nimport { VChip } from '../VChip'; // Utilities\n\nimport { deepEqual, humanReadableFileSize, wrapInArray } from '../../util/helpers';\nimport { consoleError } from '../../util/console';\nexport default VTextField.extend({\n  name: 'v-file-input',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  props: {\n    chips: Boolean,\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize'\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter'\n    },\n    placeholder: String,\n    prependIcon: {\n      type: String,\n      default: '$file'\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: v => {\n        return typeof v === 'boolean' || [1000, 1024].includes(v);\n      }\n    },\n    smallChips: Boolean,\n    truncateLength: {\n      type: [Number, String],\n      default: 22\n    },\n    type: {\n      type: String,\n      default: 'file'\n    },\n    value: {\n      default: () => [],\n      validator: val => {\n        return typeof val === 'object' || Array.isArray(val);\n      }\n    }\n  },\n  computed: {\n    classes() {\n      return { ...VTextField.options.computed.classes.call(this),\n        'v-file-input': true\n      };\n    },\n\n    counterValue() {\n      const fileCount = this.isMultiple && this.lazyValue ? this.lazyValue.length : this.lazyValue instanceof File ? 1 : 0;\n      if (!this.showSize) return this.$vuetify.lang.t(this.counterString, fileCount);\n      const bytes = this.internalArrayValue.reduce((size, file) => size + file.size, 0);\n      return this.$vuetify.lang.t(this.counterSizeString, fileCount, humanReadableFileSize(bytes, this.base === 1024));\n    },\n\n    internalArrayValue() {\n      return Array.isArray(this.internalValue) ? this.internalValue : wrapInArray(this.internalValue);\n    },\n\n    internalValue: {\n      get() {\n        return this.lazyValue;\n      },\n\n      set(val) {\n        this.lazyValue = val;\n        this.$emit('change', this.lazyValue);\n      }\n\n    },\n\n    isDirty() {\n      return this.internalArrayValue.length > 0;\n    },\n\n    isLabelActive() {\n      return this.isDirty;\n    },\n\n    isMultiple() {\n      return this.$attrs.hasOwnProperty('multiple');\n    },\n\n    text() {\n      if (!this.isDirty) return [this.placeholder];\n      return this.internalArrayValue.map(file => {\n        const name = this.truncateText(file.name);\n        return !this.showSize ? name : `${name} (${humanReadableFileSize(file.size, this.base === 1024)})`;\n      });\n    },\n\n    base() {\n      return typeof this.showSize !== 'boolean' ? this.showSize : undefined;\n    },\n\n    hasChips() {\n      return this.chips || this.smallChips;\n    }\n\n  },\n  watch: {\n    readonly: {\n      handler(v) {\n        if (v === true) consoleError('readonly is not supported on <v-file-input>', this);\n      },\n\n      immediate: true\n    },\n\n    value(v) {\n      const value = this.isMultiple ? v : v ? [v] : [];\n\n      if (!deepEqual(value, this.$refs.input.files)) {\n        // When the input value is changed programatically, clear the\n        // internal input's value so that the `onInput` handler\n        // can be triggered again if the user re-selects the exact\n        // same file(s). Ideally, `input.files` should be\n        // manipulated directly but that property is readonly.\n        this.$refs.input.value = '';\n      }\n    }\n\n  },\n  methods: {\n    clearableCallback() {\n      this.internalValue = this.isMultiple ? [] : null;\n      this.$refs.input.value = '';\n    },\n\n    genChips() {\n      if (!this.isDirty) return [];\n      return this.text.map((text, index) => this.$createElement(VChip, {\n        props: {\n          small: this.smallChips\n        },\n        on: {\n          'click:close': () => {\n            const internalValue = this.internalValue;\n            internalValue.splice(index, 1);\n            this.internalValue = internalValue; // Trigger the watcher\n          }\n        }\n      }, [text]));\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this); // We should not be setting value\n      // programmatically on the input\n      // when it is using type=\"file\"\n\n      delete input.data.domProps.value; // This solves an issue in Safari where\n      // nothing happens when adding a file\n      // do to the input event not firing\n      // https://github.com/vuetifyjs/vuetify/issues/7941\n\n      delete input.data.on.input;\n      input.data.on.change = this.onInput;\n      return [this.genSelections(), input];\n    },\n\n    genPrependSlot() {\n      if (!this.prependIcon) return null;\n      const icon = this.genIcon('prepend', () => {\n        this.$refs.input.click();\n      });\n      return this.genSlot('prepend', 'outer', [icon]);\n    },\n\n    genSelectionText() {\n      const length = this.text.length;\n      if (length < 2) return this.text;\n      if (this.showSize && !this.counter) return [this.counterValue];\n      return [this.$vuetify.lang.t(this.counterString, length)];\n    },\n\n    genSelections() {\n      const children = [];\n\n      if (this.isDirty && this.$scopedSlots.selection) {\n        this.internalArrayValue.forEach((file, index) => {\n          if (!this.$scopedSlots.selection) return;\n          children.push(this.$scopedSlots.selection({\n            text: this.text[index],\n            file,\n            index\n          }));\n        });\n      } else {\n        children.push(this.hasChips && this.isDirty ? this.genChips() : this.genSelectionText());\n      }\n\n      return this.$createElement('div', {\n        staticClass: 'v-file-input__text',\n        class: {\n          'v-file-input__text--placeholder': this.placeholder && !this.isDirty,\n          'v-file-input__text--chips': this.hasChips && !this.$scopedSlots.selection\n        },\n        on: {\n          click: () => this.$refs.input.click()\n        }\n      }, children);\n    },\n\n    onInput(e) {\n      const files = [...(e.target.files || [])];\n      this.internalValue = this.isMultiple ? files : files[0]; // Set initialValue here otherwise isFocused\n      // watcher in VTextField will emit a change\n      // event whenever the component is blurred\n\n      this.initialValue = this.internalValue;\n    },\n\n    onKeyDown(e) {\n      this.$emit('keydown', e);\n    },\n\n    truncateText(str) {\n      if (str.length < Number(this.truncateLength)) return str;\n      const charsKeepOneSide = Math.floor((Number(this.truncateLength) - 1) / 2);\n      return `${str.slice(0, charsKeepOneSide)}â€¦${str.slice(str.length - charsKeepOneSide)}`;\n    }\n\n  }\n});\n//# sourceMappingURL=VFileInput.js.map"]}]}