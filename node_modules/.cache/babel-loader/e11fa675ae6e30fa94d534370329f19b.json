{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\mixins\\scrollable\\index.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\mixins\\scrollable\\index.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Directives\nimport { Scroll } from '../../directives'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null\n  }),\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n\n  },\n  watch: {\n    isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n\n    isActive() {\n      this.savedScroll = 0;\n    }\n\n  },\n\n  mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this);\n      }\n    }\n  },\n\n  methods: {\n    onScroll() {\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(() => {\n        if (Math.abs(this.currentScroll - this.savedScroll) > this.computedScrollThreshold) this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet() {}\n\n  }\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\mixins\\scrollable\\index.js"],"names":["Scroll","consoleWarn","Vue","extend","name","directives","props","scrollTarget","String","scrollThreshold","Number","data","currentScroll","currentThreshold","isActive","isScrollingUp","previousScroll","savedScroll","target","computed","canScroll","window","computedScrollThreshold","watch","mounted","document","querySelector","methods","onScroll","scrollTop","pageYOffset","Math","abs","$nextTick","thresholdMet"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,kBAAvB,C,CAA2C;;AAE3C,SAASC,WAAT,QAA4B,oBAA5B,C,CAAkD;;AAElD,OAAOC,GAAP,MAAgB,KAAhB;AACA;;;;;;;;;AASA;;AAEA,eAAeA,GAAG,CAACC,MAAJ,CAAW;AACxBC,EAAAA,IAAI,EAAE,YADkB;AAExBC,EAAAA,UAAU,EAAE;AACVL,IAAAA;AADU,GAFY;AAKxBM,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAEC,MADT;AAELC,IAAAA,eAAe,EAAE,CAACD,MAAD,EAASE,MAAT;AAFZ,GALiB;AASxBC,EAAAA,IAAI,EAAE,OAAO;AACXC,IAAAA,aAAa,EAAE,CADJ;AAEXC,IAAAA,gBAAgB,EAAE,CAFP;AAGXC,IAAAA,QAAQ,EAAE,KAHC;AAIXC,IAAAA,aAAa,EAAE,KAJJ;AAKXC,IAAAA,cAAc,EAAE,CALL;AAMXC,IAAAA,WAAW,EAAE,CANF;AAOXC,IAAAA,MAAM,EAAE;AAPG,GAAP,CATkB;AAkBxBC,EAAAA,QAAQ,EAAE;AACR;;;;;AAKAC,IAAAA,SAAS,GAAG;AACV,aAAO,OAAOC,MAAP,KAAkB,WAAzB;AACD,KARO;;AAUR;;;;AAIAC,IAAAA,uBAAuB,GAAG;AACxB,aAAO,KAAKb,eAAL,GAAuBC,MAAM,CAAC,KAAKD,eAAN,CAA7B,GAAsD,GAA7D;AACD;;AAhBO,GAlBc;AAqCxBc,EAAAA,KAAK,EAAE;AACLR,IAAAA,aAAa,GAAG;AACd,WAAKE,WAAL,GAAmB,KAAKA,WAAL,IAAoB,KAAKL,aAA5C;AACD,KAHI;;AAKLE,IAAAA,QAAQ,GAAG;AACT,WAAKG,WAAL,GAAmB,CAAnB;AACD;;AAPI,GArCiB;;AAgDxBO,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKjB,YAAT,EAAuB;AACrB,WAAKW,MAAL,GAAcO,QAAQ,CAACC,aAAT,CAAuB,KAAKnB,YAA5B,CAAd;;AAEA,UAAI,CAAC,KAAKW,MAAV,EAAkB;AAChBjB,QAAAA,WAAW,CAAE,4CAA2C,KAAKM,YAAa,EAA/D,EAAkE,IAAlE,CAAX;AACD;AACF;AACF,GAxDuB;;AA0DxBoB,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,GAAG;AACT,UAAI,CAAC,KAAKR,SAAV,EAAqB;AACrB,WAAKJ,cAAL,GAAsB,KAAKJ,aAA3B;AACA,WAAKA,aAAL,GAAqB,KAAKM,MAAL,GAAc,KAAKA,MAAL,CAAYW,SAA1B,GAAsCR,MAAM,CAACS,WAAlE;AACA,WAAKf,aAAL,GAAqB,KAAKH,aAAL,GAAqB,KAAKI,cAA/C;AACA,WAAKH,gBAAL,GAAwBkB,IAAI,CAACC,GAAL,CAAS,KAAKpB,aAAL,GAAqB,KAAKU,uBAAnC,CAAxB;AACA,WAAKW,SAAL,CAAe,MAAM;AACnB,YAAIF,IAAI,CAACC,GAAL,CAAS,KAAKpB,aAAL,GAAqB,KAAKK,WAAnC,IAAkD,KAAKK,uBAA3D,EAAoF,KAAKY,YAAL;AACrF,OAFD;AAGD,KAVM;;AAYP;;;;;AAKAA,IAAAA,YAAY,GAAG,CAAE;;AAjBV;AA1De,CAAX,CAAf","sourcesContent":["// Directives\nimport { Scroll } from '../../directives'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null\n  }),\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n\n  },\n  watch: {\n    isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n\n    isActive() {\n      this.savedScroll = 0;\n    }\n\n  },\n\n  mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this);\n      }\n    }\n  },\n\n  methods: {\n    onScroll() {\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(() => {\n        if (Math.abs(this.currentScroll - this.savedScroll) > this.computedScrollThreshold) this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet() {}\n\n  }\n});\n//# sourceMappingURL=index.js.map"]}]}