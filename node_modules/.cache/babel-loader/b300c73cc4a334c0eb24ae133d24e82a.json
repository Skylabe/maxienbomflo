{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nimport { filterTreeItems, filterTreeItem } from './util/filterTreeItems';\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide() {\n    return {\n      treeview: this\n    };\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => []\n    },\n    dense: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => []\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false\n    },\n    search: String,\n    selectionType: {\n      type: String,\n      default: 'leaf',\n      validator: v => ['leaf', 'independent'].includes(v)\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    ...VTreeviewNodeProps\n  },\n  data: () => ({\n    activeCache: new Set(),\n    nodes: {},\n    openCache: new Set(),\n    selectedCache: new Set()\n  }),\n  computed: {\n    excludedItems() {\n      const excluded = new Set();\n      if (!this.search) return excluded;\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n\n      return excluded;\n    }\n\n  },\n  watch: {\n    items: {\n      handler() {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey));\n        const newKeys = this.getKeys(this.items);\n        const diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(k => delete this.nodes[k]);\n        const oldSelectedCache = [...this.selectedCache];\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected();\n      },\n\n      deep: true\n    },\n\n    active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n\n    value(value) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n\n    open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n\n  },\n\n  created() {\n    this.buildTree(this.items);\n    this.value.forEach(key => this.updateSelected(key, true));\n    this.active.forEach(key => this.updateActive(key, true));\n  },\n\n  mounted() {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(key => this.updateOpen(key, true));\n      this.emitOpen();\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll(value) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value));\n      this.emitOpen();\n    },\n\n    getKeys(items, keys = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        const children = getObjectValueByPath(items[i], this.itemChildren);\n\n        if (children) {\n          keys.push(...this.getKeys(children));\n        }\n      }\n\n      return keys;\n    },\n\n    buildTree(items, parent = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        const key = getObjectValueByPath(item, this.itemKey);\n        const children = getObjectValueByPath(item, this.itemChildren, []);\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        const node = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map(c => getObjectValueByPath(c, this.itemKey)),\n          item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n          node.isIndeterminate = this.nodes[parent].isIndeterminate;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes); // Don't forget to rebuild cache\n\n        if (this.nodes[key].isSelected) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    calculateState(node, state) {\n      const counts = node.children.reduce((counts, child) => {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      node.isSelected = !!node.children.length && counts[0] === node.children.length;\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0);\n      return node;\n    },\n\n    emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n\n    emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n\n    emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n\n    emitNodeCache(event, cache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache]);\n    },\n\n    handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value;\n      const old = [...cache];\n      if (deepEqual(old, value)) return;\n      old.forEach(key => updateFn(key, false));\n      value.forEach(key => updateFn(key, true));\n      emitFn();\n    },\n\n    getDescendants(key, descendants = []) {\n      const children = this.nodes[key].children;\n      descendants.push(...children);\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n\n    getParents(key) {\n      let parent = this.nodes[key].parent;\n      const parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n\n    register(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n\n    unregister(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n\n    isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n\n    updateActive(key, isActive) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false;\n          this.updateVnodeState(active);\n          this.activeCache.delete(active);\n        });\n      }\n\n      const node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n\n    updateSelected(key, isSelected) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const changed = new Map();\n\n      if (this.selectionType !== 'independent') {\n        const descendants = [key, ...this.getDescendants(key)];\n        descendants.forEach(descendant => {\n          this.nodes[descendant].isSelected = isSelected;\n          this.nodes[descendant].isIndeterminate = false;\n          changed.set(descendant, isSelected);\n        });\n        const parents = this.getParents(key);\n        parents.forEach(parent => {\n          this.nodes[parent] = this.calculateState(this.nodes[parent], this.nodes);\n          changed.set(parent, this.nodes[parent].isSelected);\n        });\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key);\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue;\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key);\n      }\n    },\n\n    updateOpen(key, isOpen) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const node = this.nodes[key];\n      const children = getObjectValueByPath(node.item, this.itemChildren);\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen));\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    updateVnodeState(key) {\n      const node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n\n    isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n\n  },\n\n  render(h) {\n    const children = this.items.length ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n    /* istanbul ignore next */\n    : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses\n      }\n    }, children);\n  }\n\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeview.js"],"names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","selectionType","validator","v","includes","value","data","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","calculateState","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","changed","Map","descendant","set","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","options","genChild","bind","staticClass","class","themeClasses"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nimport { filterTreeItems, filterTreeItem } from './util/filterTreeItems';\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide() {\n    return {\n      treeview: this\n    };\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => []\n    },\n    dense: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => []\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false\n    },\n    search: String,\n    selectionType: {\n      type: String,\n      default: 'leaf',\n      validator: v => ['leaf', 'independent'].includes(v)\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    ...VTreeviewNodeProps\n  },\n  data: () => ({\n    activeCache: new Set(),\n    nodes: {},\n    openCache: new Set(),\n    selectedCache: new Set()\n  }),\n  computed: {\n    excludedItems() {\n      const excluded = new Set();\n      if (!this.search) return excluded;\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n\n      return excluded;\n    }\n\n  },\n  watch: {\n    items: {\n      handler() {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey));\n        const newKeys = this.getKeys(this.items);\n        const diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(k => delete this.nodes[k]);\n        const oldSelectedCache = [...this.selectedCache];\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected();\n      },\n\n      deep: true\n    },\n\n    active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n\n    value(value) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n\n    open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n\n  },\n\n  created() {\n    this.buildTree(this.items);\n    this.value.forEach(key => this.updateSelected(key, true));\n    this.active.forEach(key => this.updateActive(key, true));\n  },\n\n  mounted() {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(key => this.updateOpen(key, true));\n      this.emitOpen();\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll(value) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value));\n      this.emitOpen();\n    },\n\n    getKeys(items, keys = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        const children = getObjectValueByPath(items[i], this.itemChildren);\n\n        if (children) {\n          keys.push(...this.getKeys(children));\n        }\n      }\n\n      return keys;\n    },\n\n    buildTree(items, parent = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        const key = getObjectValueByPath(item, this.itemKey);\n        const children = getObjectValueByPath(item, this.itemChildren, []);\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        const node = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map(c => getObjectValueByPath(c, this.itemKey)),\n          item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n          node.isIndeterminate = this.nodes[parent].isIndeterminate;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes); // Don't forget to rebuild cache\n\n        if (this.nodes[key].isSelected) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    calculateState(node, state) {\n      const counts = node.children.reduce((counts, child) => {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      node.isSelected = !!node.children.length && counts[0] === node.children.length;\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0);\n      return node;\n    },\n\n    emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n\n    emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n\n    emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n\n    emitNodeCache(event, cache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache]);\n    },\n\n    handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value;\n      const old = [...cache];\n      if (deepEqual(old, value)) return;\n      old.forEach(key => updateFn(key, false));\n      value.forEach(key => updateFn(key, true));\n      emitFn();\n    },\n\n    getDescendants(key, descendants = []) {\n      const children = this.nodes[key].children;\n      descendants.push(...children);\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n\n      return descendants;\n    },\n\n    getParents(key) {\n      let parent = this.nodes[key].parent;\n      const parents = [];\n\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n\n      return parents;\n    },\n\n    register(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n\n    unregister(node) {\n      const key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n\n    isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n\n    updateActive(key, isActive) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false;\n          this.updateVnodeState(active);\n          this.activeCache.delete(active);\n        });\n      }\n\n      const node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n\n    updateSelected(key, isSelected) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const changed = new Map();\n\n      if (this.selectionType !== 'independent') {\n        const descendants = [key, ...this.getDescendants(key)];\n        descendants.forEach(descendant => {\n          this.nodes[descendant].isSelected = isSelected;\n          this.nodes[descendant].isIndeterminate = false;\n          changed.set(descendant, isSelected);\n        });\n        const parents = this.getParents(key);\n        parents.forEach(parent => {\n          this.nodes[parent] = this.calculateState(this.nodes[parent], this.nodes);\n          changed.set(parent, this.nodes[parent].isSelected);\n        });\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key);\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue;\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key);\n      }\n    },\n\n    updateOpen(key, isOpen) {\n      if (!this.nodes.hasOwnProperty(key)) return;\n      const node = this.nodes[key];\n      const children = getObjectValueByPath(node.item, this.itemChildren);\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen));\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n\n    updateVnodeState(key) {\n      const node = this.nodes[key];\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n\n    isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n\n  },\n\n  render(h) {\n    const children = this.items.length ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\n    /* istanbul ignore next */\n    : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses\n      }\n    }, children);\n  }\n\n});\n//# sourceMappingURL=VTreeview.js.map"]}]}