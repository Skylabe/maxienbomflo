{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTextarea\\VTextarea.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTextarea\\VTextarea.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VTextarea/VTextarea.sass\"; // Extensions\n\nimport VTextField from '../VTextField/VTextField'; // Utilities\n\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(VTextField);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-textarea',\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseInt(v, 10))\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this)\n      };\n    },\n\n    noResizeHandle() {\n      return this.noResize || this.autoGrow;\n    }\n\n  },\n  watch: {\n    lazyValue() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    },\n\n    rowHeight() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    }\n\n  },\n\n  mounted() {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight();\n    }, 0);\n  },\n\n  methods: {\n    calculateInputHeight() {\n      const input = this.$refs.input;\n      if (!input) return;\n      input.style.height = '0';\n      const height = input.scrollHeight;\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight); // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n\n      input.style.height = Math.max(minHeight, height) + 'px';\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this);\n      input.tag = 'textarea';\n      delete input.data.attrs.type;\n      input.data.attrs.rows = this.rows;\n      return input;\n    },\n\n    onInput(e) {\n      VTextField.options.methods.onInput.call(this, e);\n      this.autoGrow && this.calculateInputHeight();\n    },\n\n    onKeyDown(e) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation();\n      }\n\n      this.$emit('keydown', e);\n    }\n\n  }\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTextarea\\VTextarea.js"],"names":["VTextField","mixins","baseMixins","extend","name","props","autoGrow","Boolean","noResize","rowHeight","type","Number","String","default","validator","v","isNaN","parseFloat","rows","parseInt","computed","classes","noResizeHandle","options","call","watch","lazyValue","$nextTick","calculateInputHeight","mounted","setTimeout","methods","input","$refs","style","height","scrollHeight","minHeight","Math","max","genInput","tag","data","attrs","onInput","e","onKeyDown","isFocused","keyCode","stopPropagation","$emit"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VTextarea/VTextarea.sass\"; // Extensions\n\nimport VTextField from '../VTextField/VTextField'; // Utilities\n\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(VTextField);\n/* @vue/component */\n\nexport default baseMixins.extend({\n  name: 'v-textarea',\n  props: {\n    autoGrow: Boolean,\n    noResize: Boolean,\n    rowHeight: {\n      type: [Number, String],\n      default: 24,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseInt(v, 10))\n    }\n  },\n  computed: {\n    classes() {\n      return {\n        'v-textarea': true,\n        'v-textarea--auto-grow': this.autoGrow,\n        'v-textarea--no-resize': this.noResizeHandle,\n        ...VTextField.options.computed.classes.call(this)\n      };\n    },\n\n    noResizeHandle() {\n      return this.noResize || this.autoGrow;\n    }\n\n  },\n  watch: {\n    lazyValue() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    },\n\n    rowHeight() {\n      this.autoGrow && this.$nextTick(this.calculateInputHeight);\n    }\n\n  },\n\n  mounted() {\n    setTimeout(() => {\n      this.autoGrow && this.calculateInputHeight();\n    }, 0);\n  },\n\n  methods: {\n    calculateInputHeight() {\n      const input = this.$refs.input;\n      if (!input) return;\n      input.style.height = '0';\n      const height = input.scrollHeight;\n      const minHeight = parseInt(this.rows, 10) * parseFloat(this.rowHeight); // This has to be done ASAP, waiting for Vue\n      // to update the DOM causes ugly layout jumping\n\n      input.style.height = Math.max(minHeight, height) + 'px';\n    },\n\n    genInput() {\n      const input = VTextField.options.methods.genInput.call(this);\n      input.tag = 'textarea';\n      delete input.data.attrs.type;\n      input.data.attrs.rows = this.rows;\n      return input;\n    },\n\n    onInput(e) {\n      VTextField.options.methods.onInput.call(this, e);\n      this.autoGrow && this.calculateInputHeight();\n    },\n\n    onKeyDown(e) {\n      // Prevents closing of a\n      // dialog when pressing\n      // enter\n      if (this.isFocused && e.keyCode === 13) {\n        e.stopPropagation();\n      }\n\n      this.$emit('keydown', e);\n    }\n\n  }\n});\n//# sourceMappingURL=VTextarea.js.map"]}]}