{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeviewNode.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeviewNode.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Components\nimport { VExpandTransition } from '../transitions';\nimport { VIcon } from '../VIcon';\nimport VTreeviewNode from './VTreeviewNode'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable';\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport { getObjectValueByPath } from '../../util/helpers';\nconst baseMixins = mixins(Colorable, RegistrableInject('treeview'));\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    default: 'primary'\n  },\n  expandIcon: {\n    type: String,\n    default: '$subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    default: '$loading'\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean\n};\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: {\n    item: {\n      type: Object,\n      default: () => null\n    },\n    ...VTreeviewNodeProps\n  },\n  data: () => ({\n    hasLoaded: false,\n    isActive: false,\n    isIndeterminate: false,\n    isLoading: false,\n    isOpen: false,\n    isSelected: false\n  }),\n  computed: {\n    disabled() {\n      return getObjectValueByPath(this.item, this.itemDisabled);\n    },\n\n    key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n\n    children() {\n      return getObjectValueByPath(this.item, this.itemChildren);\n    },\n\n    text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n\n    scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n\n    computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n\n    hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n\n  },\n\n  created() {\n    this.treeview.register(this);\n  },\n\n  beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n\n  methods: {\n    checkChildren() {\n      return new Promise(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve();\n        this.isLoading = true;\n        resolve(this.loadChildren(this.item));\n      }).then(() => {\n        this.isLoading = false;\n        this.hasLoaded = true;\n      });\n    },\n\n    open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n\n    genLabel() {\n      const children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n\n    genContent() {\n      const children = [this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps), this.genLabel(), this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n\n    genToggle() {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: e => {\n            if (this.disabled) return;\n            e.stopPropagation();\n            if (this.isLoading) return;\n            this.checkChildren().then(() => this.open());\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n\n    genCheckbox() {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined\n        },\n        on: {\n          click: e => {\n            if (this.disabled) return;\n            e.stopPropagation();\n            if (this.isLoading) return;\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected;\n                this.isIndeterminate = false;\n                this.treeview.updateSelected(this.key, this.isSelected);\n                this.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n\n    genNode() {\n      const children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n      if (this.hasChildren) children.unshift(this.genToggle());\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive\n        },\n        on: {\n          click: () => {\n            if (this.disabled) return;\n\n            if (this.openOnClick && this.hasChildren) {\n              this.open();\n            } else if (this.activatable) {\n              this.isActive = !this.isActive;\n              this.treeview.updateActive(this.key, this.isActive);\n              this.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n\n    genChild(item) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n\n    genChildrenWrapper() {\n      if (!this.isOpen || !this.children) return null;\n      const children = [this.children.map(this.genChild)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n\n    genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n\n  },\n\n  render(h) {\n    const children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key)\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VTreeview\\VTreeviewNode.js"],"names":["VExpandTransition","VIcon","VTreeviewNode","inject","RegistrableInject","Colorable","mixins","getObjectValueByPath","baseMixins","VTreeviewNodeProps","activatable","Boolean","activeClass","type","String","default","color","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","Function","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","extend","name","treeview","props","item","Object","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","computed","disabled","key","children","text","scopedProps","leaf","selected","indeterminate","active","open","computedIcon","hasChildren","length","created","register","beforeDestroy","unregister","methods","checkChildren","Promise","resolve","then","updateOpen","emitOpen","genLabel","$scopedSlots","label","push","$createElement","slot","staticClass","genContent","prepend","append","genToggle","class","on","click","e","stopPropagation","genCheckbox","undefined","$nextTick","updateSelected","emitSelected","genNode","unshift","setTextColor","updateActive","emitActive","genChild","scopedSlots","genChildrenWrapper","map","genTransition","render","h","isExcluded","attrs"],"mappings":"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","sourcesContent":["// Components\nimport { VExpandTransition } from '../transitions';\nimport { VIcon } from '../VIcon';\nimport VTreeviewNode from './VTreeviewNode'; // Mixins\n\nimport { inject as RegistrableInject } from '../../mixins/registrable';\nimport Colorable from '../../mixins/colorable'; // Utils\n\nimport mixins from '../../util/mixins';\nimport { getObjectValueByPath } from '../../util/helpers';\nconst baseMixins = mixins(Colorable, RegistrableInject('treeview'));\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active'\n  },\n  color: {\n    type: String,\n    default: 'primary'\n  },\n  expandIcon: {\n    type: String,\n    default: '$subgroup'\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate'\n  },\n  itemChildren: {\n    type: String,\n    default: 'children'\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled'\n  },\n  itemKey: {\n    type: String,\n    default: 'id'\n  },\n  itemText: {\n    type: String,\n    default: 'name'\n  },\n  loadChildren: Function,\n  loadingIcon: {\n    type: String,\n    default: '$loading'\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff'\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn'\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent'\n  },\n  shaped: Boolean,\n  transition: Boolean\n};\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-treeview-node',\n  inject: {\n    treeview: {\n      default: null\n    }\n  },\n  props: {\n    item: {\n      type: Object,\n      default: () => null\n    },\n    ...VTreeviewNodeProps\n  },\n  data: () => ({\n    hasLoaded: false,\n    isActive: false,\n    isIndeterminate: false,\n    isLoading: false,\n    isOpen: false,\n    isSelected: false\n  }),\n  computed: {\n    disabled() {\n      return getObjectValueByPath(this.item, this.itemDisabled);\n    },\n\n    key() {\n      return getObjectValueByPath(this.item, this.itemKey);\n    },\n\n    children() {\n      return getObjectValueByPath(this.item, this.itemChildren);\n    },\n\n    text() {\n      return getObjectValueByPath(this.item, this.itemText);\n    },\n\n    scopedProps() {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen\n      };\n    },\n\n    computedIcon() {\n      if (this.isIndeterminate) return this.indeterminateIcon;else if (this.isSelected) return this.onIcon;else return this.offIcon;\n    },\n\n    hasChildren() {\n      return !!this.children && (!!this.children.length || !!this.loadChildren);\n    }\n\n  },\n\n  created() {\n    this.treeview.register(this);\n  },\n\n  beforeDestroy() {\n    this.treeview.unregister(this);\n  },\n\n  methods: {\n    checkChildren() {\n      return new Promise(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve();\n        this.isLoading = true;\n        resolve(this.loadChildren(this.item));\n      }).then(() => {\n        this.isLoading = false;\n        this.hasLoaded = true;\n      });\n    },\n\n    open() {\n      this.isOpen = !this.isOpen;\n      this.treeview.updateOpen(this.key, this.isOpen);\n      this.treeview.emitOpen();\n    },\n\n    genLabel() {\n      const children = [];\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps));else children.push(this.text);\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label'\n      }, children);\n    },\n\n    genContent() {\n      const children = [this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps), this.genLabel(), this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content'\n      }, children);\n    },\n\n    genToggle() {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading\n        },\n        slot: 'prepend',\n        on: {\n          click: e => {\n            if (this.disabled) return;\n            e.stopPropagation();\n            if (this.isLoading) return;\n            this.checkChildren().then(() => this.open());\n          }\n        }\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon]);\n    },\n\n    genCheckbox() {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected ? this.selectedColor : undefined\n        },\n        on: {\n          click: e => {\n            if (this.disabled) return;\n            e.stopPropagation();\n            if (this.isLoading) return;\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected;\n                this.isIndeterminate = false;\n                this.treeview.updateSelected(this.key, this.isSelected);\n                this.treeview.emitSelected();\n              });\n            });\n          }\n        }\n      }, [this.computedIcon]);\n    },\n\n    genNode() {\n      const children = [this.genContent()];\n      if (this.selectable) children.unshift(this.genCheckbox());\n      if (this.hasChildren) children.unshift(this.genToggle());\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive\n        },\n        on: {\n          click: () => {\n            if (this.disabled) return;\n\n            if (this.openOnClick && this.hasChildren) {\n              this.open();\n            } else if (this.activatable) {\n              this.isActive = !this.isActive;\n              this.treeview.updateActive(this.key, this.isActive);\n              this.treeview.emitActive();\n            }\n          }\n        }\n      }), children);\n    },\n\n    genChild(item) {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped\n        },\n        scopedSlots: this.$scopedSlots\n      });\n    },\n\n    genChildrenWrapper() {\n      if (!this.isOpen || !this.children) return null;\n      const children = [this.children.map(this.genChild)];\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children'\n      }, children);\n    },\n\n    genTransition() {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()]);\n    }\n\n  },\n\n  render(h) {\n    const children = [this.genNode()];\n    if (this.transition) children.push(this.genTransition());else children.push(this.genChildrenWrapper());\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key)\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen)\n      }\n    }, children);\n  }\n\n});\n//# sourceMappingURL=VTreeviewNode.js.map"]}]}