{"remainingRequest":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VSkeletonLoader\\VSkeletonLoader.js","dependencies":[{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VSkeletonLoader\\VSkeletonLoader.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Styles\nimport \"../../../src/components/VSkeletonLoader/VSkeletonLoader.sass\"; // Mixins\n\nimport Elevatable from '../../mixins/elevatable';\nimport Measurable from '../../mixins/measurable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot } from '../../util/helpers';\n/* @vue/component */\n\nexport default mixins(Elevatable, Measurable, Themeable).extend({\n  name: 'VSkeletonLoader',\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  computed: {\n    attrs() {\n      if (!this.isLoading) return this.$attrs;\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs\n      } : {};\n    },\n\n    classes() {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses\n      };\n    },\n\n    isLoading() {\n      return Boolean(!getSlot(this) || this.loading);\n    },\n\n    rootTypes() {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types\n      };\n    }\n\n  },\n  methods: {\n    genBone(text, children) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`\n      }, children);\n    },\n\n    genBones(bone) {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@');\n\n      const generator = () => this.genStructure(type); // Generate a length array based upon\n      // value after @ in the bone string\n\n\n      return Array.from({\n        length\n      }).map(generator);\n    },\n\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure(type) {\n      let children = [];\n      type = type || this.type || '';\n      const bone = this.rootTypes[type] || ''; // End of recursion, do nothing\n\n      /* eslint-disable-next-line no-empty, brace-style */\n\n      if (type === bone) {} // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type); // Array of values - e.g. 'paragraph@4'\n        else if (type.indexOf('@') > -1) return this.genBones(type); // Array of values - e.g. 'card@2'\n          else if (bone.indexOf(',') > -1) children = this.mapBones(bone); // Array of values - e.g. 'list-item@2'\n            else if (bone.indexOf('@') > -1) children = this.genBones(bone); // Single value - e.g. 'card-heading'\n              else if (bone) children.push(this.genStructure(bone));\n\n      return [this.genBone(type, children)];\n    },\n\n    genSkeleton() {\n      const children = [];\n      const slot = getSlot(this);\n      if (!this.isLoading) children.push(slot);else children.push(this.genStructure());\n      /* istanbul ignore else */\n\n      if (!this.transition) return children;\n      /* istanbul ignore next */\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          enter: el => {\n            if (this.isLoading) el.style.transition = 'none';\n          },\n          beforeLeave: el => {\n            el.style.display = 'none';\n          }\n        }\n      }, children);\n    },\n\n    mapBones(bones) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined\n    }, [this.genSkeleton()]);\n  }\n\n});",{"version":3,"sources":["C:\\Users\\breys\\Documents\\cours\\WEB\\maxienbomflo\\node_modules\\vuetify\\lib\\components\\VSkeletonLoader\\VSkeletonLoader.js"],"names":["Elevatable","Measurable","Themeable","mixins","getSlot","extend","name","props","boilerplate","Boolean","loading","tile","transition","String","type","types","Object","default","computed","attrs","isLoading","$attrs","role","classes","themeClasses","elevationClasses","rootTypes","actions","article","avatar","button","card","chip","heading","image","paragraph","sentences","table","text","methods","genBone","children","$createElement","staticClass","genBones","bone","length","split","generator","genStructure","Array","from","map","indexOf","mapBones","push","genSkeleton","slot","on","enter","el","style","beforeLeave","display","bones","replace","render","h","$listeners","class","measurableStyles","undefined"],"mappings":"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","sourcesContent":["// Styles\nimport \"../../../src/components/VSkeletonLoader/VSkeletonLoader.sass\"; // Mixins\n\nimport Elevatable from '../../mixins/elevatable';\nimport Measurable from '../../mixins/measurable';\nimport Themeable from '../../mixins/themeable'; // Utilities\n\nimport mixins from '../../util/mixins';\nimport { getSlot } from '../../util/helpers';\n/* @vue/component */\n\nexport default mixins(Elevatable, Measurable, Themeable).extend({\n  name: 'VSkeletonLoader',\n  props: {\n    boilerplate: Boolean,\n    loading: Boolean,\n    tile: Boolean,\n    transition: String,\n    type: String,\n    types: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  computed: {\n    attrs() {\n      if (!this.isLoading) return this.$attrs;\n      return !this.boilerplate ? {\n        'aria-busy': true,\n        'aria-live': 'polite',\n        role: 'alert',\n        ...this.$attrs\n      } : {};\n    },\n\n    classes() {\n      return {\n        'v-skeleton-loader--boilerplate': this.boilerplate,\n        'v-skeleton-loader--is-loading': this.isLoading,\n        'v-skeleton-loader--tile': this.tile,\n        ...this.themeClasses,\n        ...this.elevationClasses\n      };\n    },\n\n    isLoading() {\n      return Boolean(!getSlot(this) || this.loading);\n    },\n\n    rootTypes() {\n      return {\n        actions: 'button@2',\n        article: 'heading, paragraph',\n        avatar: 'avatar',\n        button: 'button',\n        card: 'image, card-heading',\n        'card-avatar': 'image, list-item-avatar',\n        'card-heading': 'heading',\n        chip: 'chip',\n        'date-picker': 'list-item, card-heading, divider, date-picker-options, date-picker-days, actions',\n        'date-picker-options': 'text, avatar@2',\n        'date-picker-days': 'avatar@28',\n        heading: 'heading',\n        image: 'image',\n        'list-item': 'text',\n        'list-item-avatar': 'avatar, text',\n        'list-item-two-line': 'sentences',\n        'list-item-avatar-two-line': 'avatar, sentences',\n        'list-item-three-line': 'paragraph',\n        'list-item-avatar-three-line': 'avatar, paragraph',\n        paragraph: 'text@3',\n        sentences: 'text@2',\n        table: 'table-heading, table-thead, table-tbody, table-tfoot',\n        'table-heading': 'heading, text',\n        'table-thead': 'heading@6',\n        'table-tbody': 'table-row-divider@6',\n        'table-row-divider': 'table-row, divider',\n        'table-row': 'table-cell@6',\n        'table-cell': 'text',\n        'table-tfoot': 'text@2, avatar@2',\n        text: 'text',\n        ...this.types\n      };\n    }\n\n  },\n  methods: {\n    genBone(text, children) {\n      return this.$createElement('div', {\n        staticClass: `v-skeleton-loader__${text} v-skeleton-loader__bone`\n      }, children);\n    },\n\n    genBones(bone) {\n      // e.g. 'text@3'\n      const [type, length] = bone.split('@');\n\n      const generator = () => this.genStructure(type); // Generate a length array based upon\n      // value after @ in the bone string\n\n\n      return Array.from({\n        length\n      }).map(generator);\n    },\n\n    // Fix type when this is merged\n    // https://github.com/microsoft/TypeScript/pull/33050\n    genStructure(type) {\n      let children = [];\n      type = type || this.type || '';\n      const bone = this.rootTypes[type] || ''; // End of recursion, do nothing\n\n      /* eslint-disable-next-line no-empty, brace-style */\n\n      if (type === bone) {} // Array of values - e.g. 'heading, paragraph, text@2'\n      else if (type.indexOf(',') > -1) return this.mapBones(type); // Array of values - e.g. 'paragraph@4'\n        else if (type.indexOf('@') > -1) return this.genBones(type); // Array of values - e.g. 'card@2'\n          else if (bone.indexOf(',') > -1) children = this.mapBones(bone); // Array of values - e.g. 'list-item@2'\n            else if (bone.indexOf('@') > -1) children = this.genBones(bone); // Single value - e.g. 'card-heading'\n              else if (bone) children.push(this.genStructure(bone));\n\n      return [this.genBone(type, children)];\n    },\n\n    genSkeleton() {\n      const children = [];\n      const slot = getSlot(this);\n      if (!this.isLoading) children.push(slot);else children.push(this.genStructure());\n      /* istanbul ignore else */\n\n      if (!this.transition) return children;\n      /* istanbul ignore next */\n\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        },\n        // Only show transition when\n        // content has been loaded\n        on: {\n          enter: el => {\n            if (this.isLoading) el.style.transition = 'none';\n          },\n          beforeLeave: el => {\n            el.style.display = 'none';\n          }\n        }\n      }, children);\n    },\n\n    mapBones(bones) {\n      // Remove spaces and return array of structures\n      return bones.replace(/\\s/g, '').split(',').map(this.genStructure);\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-skeleton-loader',\n      attrs: this.attrs,\n      on: this.$listeners,\n      class: this.classes,\n      style: this.isLoading ? this.measurableStyles : undefined\n    }, [this.genSkeleton()]);\n  }\n\n});\n//# sourceMappingURL=VSkeletonLoader.js.map"]}]}